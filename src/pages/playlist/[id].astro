---
import PageLayout from "../../layouts/PageLayout.astro";
import PlaylistChat from "../../components/playlist/PlayListChat.astro";

import { getAllPlaylists, getPlaylistVideos } from "../../lib/youtube";
import { playlistsConst } from "@/constants/playlists";
import PlayListList from "@/components/playlist/PlayListList.astro";

export async function getStaticPaths() {
  const playlists = await getAllPlaylists();

  return playlists.map((playlist) => ({
    params: { id: playlist.id },
    props: { title: playlist.title + " - " + playlist.channelTitle },
  }));
}

const { params, props } = Astro;
const playlistId = params.id;
const title = props.title;

const videos = await getPlaylistVideos(playlistId);
const playListKeys = videos.map((video) => video.id);
const playListChats = playListKeys.filter((id) => id in playlistsConst);

const channelId = videos[0]?.channelId;
const initialVideoId = videos[0]?.id;

// console.log("VIDEO", videos[0]);
// console.log("CHANNEL ID", channelId);
// console.log("PLAYLIST CHATS", playListChats);
---

<PageLayout
  title=`Playlist de ${title}`
  descr={videos[0]?.descr}
  currentChannelId={channelId}
  mainClass="w-full"
>
  <div class="grid grid-cols-1 md:grid-cols-[2fr_1fr] gap-x-6 relative">
    <!-- ðŸŽ¬ Player -->
    <div class="w-full aspect-video">
      <iframe
        id="videoPlayer"
        class="w-full h-full rounded-xl aspect-video"
        src={`https://www.youtube.com/embed/${initialVideoId}?autoplay=1&rel=0&enablejsapi=1`}
        title="YouTube Video Player"
        loading="lazy"
        frameBorder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowFullScreen></iframe>

      <h1 class="text-2xl font-bold p-2 text-left">{title}</h1>
    </div>

    <!-- ðŸ“º Sidebar video list -->
    <aside
      id="playList"
      class="overflow-hidden"
      style="max-height:var(--height-playlist);"
    >
      <div
        id="playListHeader"
        class="border-b border-b-gray-950 flex items-center justify-between px-4 py-3 bg-(--color-primary) text-white dark:border-zinc-800"
      >
        <div class="text-sm font-medium">
          {videos.length}
          {videos.length > 1 ? "videos" : "video"}
        </div>
        <div class="flex space-x-2">
          <button
            id="playListChatButton"
            title="Chat"
            class=`text-xl cursor-pointer`
            style=`${!playListChats.includes(initialVideoId) ? "display:none" : ""}`
            onclick="openChat()"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              fill="currentColor"
              class="bi bi-chat-left-text"
              viewBox="0 0 16 16"
            >
              <path
                d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"
              ></path>
              <path
                d="M3 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5M3 6a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 6m0 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5"
              ></path>
            </svg>
          </button>
          <button
            title="Anterior"
            class="text-xl cursor-pointer"
            onclick="nextVideo(-1)"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              fill="currentColor"
              class="bi bi-chevron-left"
              viewBox="0 0 16 16"
            >
              <path
                fill-rule="evenodd"
                d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0"
              ></path>
            </svg>
          </button>
          <button
            title="Siguiente"
            class="text-xl cursor-pointer"
            onclick="nextVideo(1)"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              fill="currentColor"
              class="bi bi-chevron-right"
              viewBox="0 0 16 16"
            >
              <path
                fill-rule="evenodd"
                d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708"
              ></path>
            </svg>
          </button>
        </div>
      </div>

      <PlayListList
        videos={videos}
        initialVideoId={initialVideoId}
        playListsConst={playlistsConst}
        playListChats={playListChats}
      />

      <PlaylistChat />
    </aside>
  </div>
</PageLayout>

<!-- JavaScript para cambiar el vÃ­deo -->

<style></style>

<script is:inline>
  // 2. This code loads the IFrame Player API code asynchronously.
  var tag = document.createElement("script");

  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName("script")[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // 3. This function creates an <iframe> (and YouTube player)
  //    after the API code downloads.
  var player;
  function onYouTubeIframeAPIReady() {
    player = new YT.Player("videoPlayer", {
      events: {
        onReady: onPlayerReady,
      },
    });
  }

  // 4. The API will call this function when the video player is ready.
  function onPlayerReady(event) {
    // Cada X tiempo consultamos el tiempo actual
    setInterval(() => {
      const currentSeconds = player.getCurrentTime();
      console.log("CURRENT SECONDS", currentSeconds);

      findComments(currentSeconds);
    }, 1000); // Cada medio segundo, por ejemplo
  }
</script>

<script is:inline>
  var videosButton = 0;
  var numVideos = 0;
  var currentVideoIndex = 0;
  var videoPlayer;
  var playlistHeader;
  var playListList;
  var playListVideos;
  var playListChatButton;
  var chatFrame;
  var r = document.querySelector(":root");

  window.addEventListener("DOMContentLoaded", function () {
    videosButton = document.querySelectorAll(".videoButton");
    numVideos = videosButton.length;

    videoPlayer = document.getElementById("videoPlayer");
    playlistHeader = document.getElementById("playListHeader");
    playListList = document.getElementById("playListList");
    playListVideos = document.querySelectorAll("#playListList button");
    playListChatButton = document.getElementById("playListChatButton");
    chatFrame = document.getElementById("chatFrame");

    setHeightPlaylist();
    window.addEventListener("resize", setHeightPlaylist);
  });

  function setHeightPlaylist() {
    var isMobile = window.innerWidth < 768;

    if (!isMobile) {
      var heightContainer = videoPlayer.offsetHeight;
      r.style.setProperty("--height-playlist", heightContainer + "px");
      var heightHeader = playlistHeader.offsetHeight;
      console.log("HEIGHT", heightContainer, heightHeader);
      r.style.setProperty(
        "--height-playlist-list",
        heightContainer - heightHeader + "px"
      );
      r.style.setProperty(
        "--height-playlist-chat",
        heightContainer - heightHeader - 20 + "px"
      ); // FIX padding chat
    } else {
      var screenHeight = window.innerHeight;
      var minHeight = playListList.offsetHeight;
      console.log("MIN HEIGHT", minHeight);
      var heightHeader = playlistHeader.getBoundingClientRect().bottom;
      var height = Math.max(
        Math.min(screenHeight - heightHeader - 10, minHeight),
        300
      );
      r.style.setProperty("--height-playlist-list", height + "px");
    }

    console.log("HEIGHT PLAYLIST", heightContainer, heightHeader);
  }

  function nextVideo(sum) {
    index = (currentVideoIndex + sum + numVideos) % numVideos;
    console.log("INDEX", index);
    changeVideo(index);
  }

  function changeVideo(index) {
    videosButton.forEach((element) => {
      element.classList.remove("videoSelected");
    });

    const videoButton = videosButton[index];
    videoButton.classList.add("videoSelected");

    const videoId = videoButton.dataset.videoId; //.getAttribute("data-video-id");
    const hasChat = videoButton.dataset.chat == 1; //.getAttribute("data-chat");
    currentVideoIndex = index;

    const player = document.getElementById("videoPlayer");
    player.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0&enablejsapi=1`;

    playListChatButton.style.display = hasChat ? "block" : "none";
  }

  function openChat() {
    console.log("OPEN CHAT");
    const isChatVisible = playListChat.style.display != "none";

    playListChat.style.display = isChatVisible ? "none" : "block";
    playListList.style.display = isChatVisible ? "block" : "none";

    const video = playListVideos[currentVideoIndex];
    console.log(playListVideos);
    console.log(video);
    const id = video.dataset.videoId;

    chatFrame.src = `/chat/${id}.html`;
    chatFrame.dataset.seconds = video.dataset.seconds;
    // let html = fetch(`/chat/${id}.html`)
    //   .then((response) => response.text())
    //   .then((html) => (chatFrame.innerHTML = html));

    // initChat();
    // setComments();
  }
</script>
